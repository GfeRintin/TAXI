from aiogram import types, Dispatcher
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from creat_bot import dp, bot, db, TOKEN, os
from Handlers.echo.check_reg import check_reg

from datetime import datetime, timedelta

driver_data=CallbackData("none", "action", "func", "user_id")

class From(StatesGroup):
    msg1 = State()
    msg2 = State()


async def reg_driver(message: types.Message):
    if not await check_reg(message):
        return
    if not bool(message.from_user.username):
        await bot.send_message(chat_id=message.chat.id, text="–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±–µ @username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ")

    await bot.send_message(chat_id=message.chat.id, text="""üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, —É–≤–∞–∂–∞–µ–º—ã–π –≤–æ–¥–∏—Ç–µ–ª—å! üöó

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥.

–î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–æ—Å–∏–º –≤–∞—Å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:

1Ô∏è‚É£ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã –≤–æ –≤—Å–µ—Ö –æ–±—â–µ–Ω–∏—è—Ö —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. –û—Ç–∑—ã–≤—ã –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—è –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å.

2Ô∏è‚É£ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–µ–∑–¥–∫—É. –î–µ—Ä–∂–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —á–∏—Å—Ç–æ—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏, —Å–æ–±–ª—é–¥–∞—è –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è.

3Ô∏è‚É£ –£–≤–∞–∂–∞–π—Ç–µ –ª–∏—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å. –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

4Ô∏è‚É£ –ë—É–¥—å—Ç–µ –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω—ã –∏ –Ω–∞–¥–µ–∂–Ω—ã. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã –≤–æ–≤—Ä–µ–º—è –∏ –ø—Ä–∏–±—ã–≤–∞–π—Ç–µ –∫ –º–µ—Å—Ç—É –ø–æ–¥–∞—á–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞–¥–ª–µ–∂–∞—â–∏–º –æ–±—Ä–∞–∑–æ–º.

5Ô∏è‚É£ –†–∞–±–æ—Ç–∞–π—Ç–µ —Å —É–ª—ã–±–∫–æ–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–º. –õ–∏—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç–∞–º —è–≤–ª—è—é—Ç—Å—è –Ω–∞—à–µ–π –≥–ª–∞–≤–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é.

–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏ –∂–µ–ª–∞–µ–º –≤–∞–º –ø—Ä–∏—è—Ç–Ω–æ–π –∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üåüüöñ""")
    await bot.send_message(chat_id=message.chat.id, text="–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –º–∞—à–∏–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ê123–ë–í123")
    await From.msg1.set()

async def reg_number_car(message: types.Message, state: FSMContext):
    number_car=message.text
    await state.finish()

    if len(number_car) > 9:
        await bot.send_message(chat_id=message.chat.id, text="–°–∏–º–≤–æ–ª–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ")
        return
    if not number_car[0].isalpha():
        await bot.send_message(chat_id=message.chat.id, text="1–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    if not number_car[1].isdigit():
        await bot.send_message(chat_id=message.chat.id, text="2–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    if not number_car[2].isdigit():
        await bot.send_message(chat_id=message.chat.id, text="3–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    if not number_car[3].isdigit():
        await bot.send_message(chat_id=message.chat.id, text="4–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    if not number_car[4].isalpha():
        await bot.send_message(chat_id=message.chat.id, text="5–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    if not number_car[5].isalpha():
        await bot.send_message(chat_id=message.chat.id, text="6–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    if not number_car[6].isdigit():
        await bot.send_message(chat_id=message.chat.id, text="7–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    if not number_car[7].isdigit():
        await bot.send_message(chat_id=message.chat.id, text="8–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    if not number_car[8].isdigit():
        await bot.send_message(chat_id=message.chat.id, text="9–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    
    #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    db.add_number_car(number_car=number_car, user_id=message.from_user.id)
    await bot.send_message(chat_id=message.chat.id, text="–û—Ç–ª–∏—á–Ω–æ!\n–ü—Ä–∏—à–ª–∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã,–≥–¥–µ –æ—Ç—á—ë—Ç–ª–∏–≤–æ –≤–∏–¥–Ω–æ –Ω–æ–º–µ—Ä–∞")
    await From.msg2.set()

async def reg_photo_car(message: types.Message, state: FSMContext):
    if not message.content_type == 'photo':
        await bot.send_message(chat_id=message.chat.id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –û–î–ù–û —Ñ–æ—Ç–æ")
        return
    await state.finish()
    await bot.send_message(chat_id=message.chat.id, text="–û—Ç–ª–∏—á–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ –≤—ã –ø—Ä–æ—ë–¥–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç–æ –≤–∞—Å –¥–æ–±–∞–≤—è—Ç –≤ –±–µ—Å—Å–µ–¥—É")

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
    file_info = await bot.get_file(message.photo[len(message.photo) - 1].file_id)
    downloaded_file = await bot.download_file(file_info.file_path)
    PATH = os.getcwd()
    src = PATH + "\\DB\\car\\" + str(db.give_number_car(message.from_user.id)) + ".png"
    with open(src, 'wb') as new_file:
        new_file.write(downloaded_file.getvalue())



    #–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è –∞–¥–º–∏–Ω—É
    markup = types.InlineKeyboardMarkup()
    button = [
        types.InlineKeyboardButton(text='‚úÖ', callback_data=driver_data.new(action=True, func="new_driver", user_id=message.from_user.id)),
        types.InlineKeyboardButton(text='‚ùå', callback_data=driver_data.new(action=False, func="new_driver", user_id=message.from_user.id)),
        types.InlineKeyboardButton(text=message.from_user.username, url='https://t.me/' + message.from_user.username),

        ]
    markup.add(*button)
    with open(src, 'rb') as photo:
        await bot.send_photo(chat_id=TOKEN.adminChatId, photo=photo, caption="–ü—Ä–∏–Ω—è—Ç—å –ª–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è?\n " + str(db.give_number_car(message.from_user.id)), reply_markup=markup, parse_mode='HTML')


async def quantity_orders(call: CallbackData, callback_data: dict):
    """–í—ã–¥–∞–µ–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤"""
    user_id =callback_data.get("user_id")
    if callback_data.get("action") == "True":
        
        markup = types.InlineKeyboardMarkup()
        button = [
        types.InlineKeyboardButton(text='10', callback_data=driver_data.new(action=10, func="quantity", user_id=user_id)),
        types.InlineKeyboardButton(text='15', callback_data=driver_data.new(action=15, func="quantity", user_id=user_id)),
        types.InlineKeyboardButton(text='20', callback_data=driver_data.new(action=20, func="quantity", user_id=user_id)),
        types.InlineKeyboardButton(text='25', callback_data=driver_data.new(action=25, func="quantity", user_id=user_id)),
        types.InlineKeyboardButton(text='30', callback_data=driver_data.new(action=30, func="quantity", user_id=user_id)),
        ]
        markup.add(*button)
        await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=str(call.message.caption) + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –µ–º—É –≤—ã–¥–µ–ª–∏—Ç–µ", reply_markup=markup)

    if callback_data.get("action") == "False":
        # –ù–µ –ü—Ä–∏–Ω—è–ª –≤–æ–¥–∏—Ç–µ–ª—è
        await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=str(call.message.caption) + "\n–í—ã –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è")
        await bot.send_message(chat_id=callback_data.get("user_id"), text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –í–∞—Å –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ –≤ –≤–æ–¥–∏—Ç–µ–ª–µ–π\n")

async def add_new_drive(call: CallbackData, callback_data: dict):
        """–ü—Ä–∏–Ω–∏–º–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è"""        
        # –ü—Ä–∏–Ω—è–ª –≤–æ–¥–∏—Ç–µ–ª—è
        db.add_driver(callback_data.get("user_id"), int(callback_data.get("action")))
        await bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=str(call.message.caption) + "\n–í—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è")
        expire_date = datetime.now() + timedelta(days=1)
        link = await bot.create_chat_invite_link(TOKEN.chatId, expire_date.timestamp, 1)
        await bot.send_message(chat_id=callback_data.get("user_id"), text="–í–∞—Å –ø—Ä–∏–Ω—è–ª–∏ –≤ –≤–æ–¥–∏—Ç–µ–ª–µ–π\n" + link.invite_link)
        

        


def register_handler(dp: Dispatcher):
    dp.register_callback_query_handler(quantity_orders, driver_data.filter(func=['new_driver']))
    dp.register_callback_query_handler(add_new_drive, driver_data.filter(func=['quantity']))
    dp.register_message_handler(reg_driver, commands=['reg_driver'])
    dp.register_message_handler(reg_number_car, state=From.msg1)
    dp.register_message_handler(reg_photo_car, content_types=types.ContentTypes.PHOTO, state=From.msg2)