import asyncio
from aiogram import types, Dispatcher
from creat_bot import bot, db, TOKEN, SQLighter
from Handlers.menu import menu as mn
import traceback
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class cabinet_check(StatesGroup):
    msg1 = State()
    msg2 = State()


# start
# @dp.message_handler(commands=['start'])
async def start(message: types.Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("TAXI_bot")
    try:
        if not bool(len(db.subscriber_exists(message.chat.id))):
            await _start_(message)          
        else:
            await bot.send_message(message.chat.id, text ="""üöï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏! \n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –º–∞—à–∏–Ω—É. \n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–æ–π! üåüüöñ""", reply_markup=types.ReplyKeyboardRemove() )
            await mn.menu(message)
    except Exception as e:
        traceback.print_exc()
        print(e)


# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
async def _start_(message: types.Message):

    # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if not bool(len(db.subscriber_exists(message.from_user.id))):
        if bool(message.from_user.username):
            db.add_subscriber(message.from_user.id, username=message.from_user.username,
                              first_name=message.from_user.first_name, last_name=message.from_user.last_name)
        else:
            db.add_subscriber(message.from_user.id, username=0,
                              first_name=message.from_user.first_name, last_name=message.from_user.last_name)
        await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, ' + str(message.from_user.first_name) + 'üëã')
        await bot.send_message(message.chat.id, text ="""üöï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –º–∞—à–∏–Ω—É. \n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–æ–π! üåüüöñ""" )
        markup = types.ReplyKeyboardMarkup(row_width=1)
        button = [
            types.KeyboardButton(text='‚òéÔ∏è - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True, one_time_keyboard =True),
            ]
        markup.add(*button)
        await bot.send_message(message.chat.id, text ="üî∂ –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É–∫–∞–∑–∞–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏. ‚òéÔ∏èüöñ", reply_markup=markup)

async def add_phone(message: types.Message):
    contact = message.contact
    await bot.send_message(message.chat.id, text=f"–°–ø–∞—Å–∏–±–æ, {contact.full_name}.\n"+
                         f"–í–∞—à –Ω–æ–º–µ—Ä {contact.phone_number} –±—ã–ª –ø–æ–ª—É—á–µ–Ω",
                         reply_markup=types.ReplyKeyboardRemove())
    db.add_phone(contact.phone_number, message.from_user.id)
    await mn.menu(message)
    await newUsers(message)                

# —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def newUsers(message: types.Message):
    new_user = types.InlineKeyboardMarkup()
    if bool(message.from_user.username):
        info_user = types.InlineKeyboardButton(text=str(message.from_user.first_name), url=str('https://t.me/' + message.from_user.username))
        new_user.add(info_user)
        await bot.send_message(TOKEN.adminChatId, "–£ –≤–∞—Å –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", reply_markup=new_user)
    else:
        await bot.send_message(TOKEN.adminChatId, "–£ –≤–∞—Å –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n" + str(message.from_user.first_name))



def register_handler_start(dp: Dispatcher):
    dp.register_message_handler(add_phone, content_types=types.ContentType.CONTACT)
    dp.register_message_handler(start, commands=['start'], state='*')
    dp.register_message_handler(start, commands=['start'])
