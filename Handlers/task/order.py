from aiogram import types, Dispatcher
from aiogram.utils.callback_data import CallbackData
from creat_bot import dp, bot, db, TOKEN
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import json

from Handlers.start import updateUserName as uun

import requests
import asyncio
import datetime
from Handlers.echo.check_reg import check_reg 

class From(StatesGroup):
    comment = State()
   

location_data = CallbackData("none", "action", "func", "mes_id")
order_id_data = CallbackData("none", "id_db", "func", "user_id")
comment_data = CallbackData("none", "action", "func", "id_db")

def get_address_from_coords(coords):
    """–ó–∞–ø—Ä–æ—Å –≤ —è–Ω–¥–µ–∫—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å"""
    #–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –≤—ã–∂–µ. –í–ø–∏—à–∏ –≤ –ø–æ–ª–µ apikey —Å–≤–æ–π —Ç–æ–∫–µ–Ω!
    PARAMS = {
        "apikey":"bd9f2337-293e-49f9-98a7-75b305e04b41",
        "format":"json",
        "lang":"ru_RU",
        "kind":"house",
        "geocode": coords
    }

    #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –∞–¥—Ä–µ—Å—É –≥–µ–æ–∫–æ–¥–µ—Ä–∞.
    try:
        r = requests.get(url="https://geocode-maps.yandex.ru/1.x/", params=PARAMS)
        #–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        json_data = r.json()
        #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –≤—Å–µ–≥–æ –ø—Ä–∏—à–µ–¥—à–µ–≥–æ json –∏–º–µ–Ω–Ω–æ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º.
        address_str = json_data["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["metaDataProperty"]["GeocoderMetaData"]["AddressDetails"]["Country"]["AddressLine"]
        #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
        return address_str
    except Exception as e:
        #–µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        print(e)
        return "error"

async def location(message: types.Message):
    if not check_reg:
        return
    uun.updateUserName(message)
    markup = types.ReplyKeyboardMarkup(row_width=1)
    button = [
        types.KeyboardButton(text='üÜò - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–∂–∏–º–∞–π —Å—é–¥–∞.', request_location = True, callback_data="geo", one_time_keyboard =True),
        ]
    markup.add(*button)
    await bot.send_message(message.chat.id, text = '–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', reply_markup = markup)

async def get_location(message: types.Message):
    if not check_reg:
        return
    
    if db.order_finish__exists_client(message.chat.id) != None:
        await bot.send_message(message.chat.id, text ="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–æ–±—â–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n /help - –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        return

    uun.updateUserName(message)
    #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –Ω–µ–≥–æ –¥–æ–ª–≥–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É
    current_position = (message.location.longitude, message.location.latitude)
    #—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –≤–∏–¥–µ –î–û–õ–ì–û–¢–ê,–®–ò–†–ò–ù–ê
    coords = f"{current_position[0]},{current_position[1]}"
    #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    address_str = get_address_from_coords(coords)
    #address_str = "–†–æ—Å—Å–∏—è, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø—Ä–æ—Å–ø–µ–∫—Ç –ö—É–ª—å—Ç—É—Ä—ã, 6–∫3 —Ç–µ—Å—Ç"
    #–≤–æ–≤—â—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –±–æ—Ç–µ
    markup = types.ReplyKeyboardRemove()
    mes = await bot.send_message(message.chat.id, text ="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...‚è≥", reply_markup=markup)
    await asyncio.sleep(1)
    await bot.delete_message(chat_id=message.chat.id, message_id=mes.message_id)
    markup = types.InlineKeyboardMarkup()
    button = [
        types.InlineKeyboardButton(text='‚úÖ', callback_data=location_data.new(action=True, func="location", mes_id=message.message_id)),
        types.InlineKeyboardButton(text='‚ùå', callback_data=location_data.new(action=False, func="location", mes_id=message.message_id)),
        ]
    markup.add(*button)
    await bot.send_message(message.chat.id, text =address_str, reply_markup=markup)


async def new_order(call: CallbackData, callback_data:dict):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    if callback_data.get("action") == "False":
        # –ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –∞–¥—Ä–µ—Å–æ–º –∏–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª
        markup = types.ReplyKeyboardMarkup(row_width=1)
        button = [
            types.KeyboardButton(text='üÜò - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–∂–∏–º–∞–π —Å—é–¥–∞.', request_location = True, callback_data="geo", one_time_keyboard =True),
            ]
        markup.add(*button)
        await call.message.edit_text(text ="–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω!")
        return
    elif callback_data.get("action") == "True":
        await call.message.edit_text(text=call.message.text)
        await bot.forward_message(chat_id=TOKEN.chatId, from_chat_id=call.message.chat.id, message_id=callback_data.get('mes_id'))

        #–°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
        db.new_order(address=call.message.text, create_order=datetime.datetime.now().strftime("%d/%m/%y %H:%M"), phone=db.subscriber_exists(call.message.chat.id)[0][8], user_id=call.message.chat.id)

        markup = types.InlineKeyboardMarkup(row_width=1)
        button = [
            types.InlineKeyboardButton(text='–ë–µ—Ä—É –∑–∞–∫–∞–∑ —Å–µ–±–µ‚Ü©Ô∏è', callback_data=order_id_data.new(id_db=str(db.get_order_last()[0][0]), func='take_order', user_id=call.from_user.id)),
        ]
        markup.add(*button)

        order_mes = await bot.send_message(chat_id=TOKEN.chatId, text="–ù–û–í–´–ô –ó–ê–ö–ê–ó!!!\n" + call.message.text + "\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - " + str(db.subscriber_exists(call.message.chat.id)[0][8]), reply_markup=markup)

        db.add_message_chat(message_chat=str(order_mes), order_id = str(db.get_order_last()[0][0]))

        markup_com = types.InlineKeyboardMarkup(row_width=1)
        button_1 = [
            # –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–µ—Ä–∏–µ–≤
            #types.InlineKeyboardButton(text='üìÉ–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É', callback_data=comment_data.new(action="add_comment", func="comment", id_db=str(db.get_order_last()[0][0]) )),
            types.InlineKeyboardButton(text="‚≠ïÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=comment_data.new(action="chanel_order", func="comment", id_db=str(db.get_order_last()[0][0]) ))
        ]
        markup_com.add(*button_1)
        client_mes= await bot.send_message(call.message.chat.id, text ="""üéâ–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n‚è≥–û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –º—ã —É–∂–µ –∏—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è!""", reply_markup=markup_com)
        db.add_message_client(message_client=str(client_mes), order_id = str(db.get_order_last()[0][0]))

async def add_comment(call: CallbackData, callback_data:dict):
    id_db = callback_data.get('id_db')
    await bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    button = [
        types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞‚ùå', callback_data=comment_data.new(action="chanel_comment", func="comment", id_db=id_db )),
        ]
    markup.add(*button)
    await bot.send_message(call.message.chat.id, text ="–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º", reply_markup=markup)
    await From.comment.set()

async def get_comment(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-1)
    await bot.edit_message_text(chat_id=TOKEN.chatId, message_id=json.loads(str(db.get_message_chat(message.from_user.id)))['message_id'], text=json.loads(str(db.get_message_chat(message.from_user.id)))['text'] + "\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É - " + message.text, reply_markup=json.loads(str(db.get_message_chat(message.from_user.id)))['reply_markup'])
    await bot.send_message(message.chat.id, text ="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω")

async def chanel_cooment(call: CallbackData, callback_data:dict, state: FSMContext):
    await state.finish()
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    # await bot.send_message(call.message.chat.id, text ="–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

async def chanel_order(call: CallbackData, callback_data:dict):
    id_db = callback_data.get('id_db')
    db.add_finish_order(id_db)
    await bot.edit_message_text(chat_id=TOKEN.chatId, message_id=json.loads(str(db.get_message_chat(call.from_user.id)))['message_id'], text=json.loads(str(db.get_message_chat(call.from_user.id)))['text'] + "\n–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω!")
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=json.loads(str(db.get_message_client(call.from_user.id)))['message_id'], text=json.loads(str(db.get_message_client(call.from_user.id)))['text'] + "\n–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω!")



def register_handler(dp: Dispatcher):
    dp.register_callback_query_handler(chanel_cooment, comment_data.filter(action=['chanel_comment']), state=From.comment)
    dp.register_message_handler(get_comment, state=From.comment)
    dp.register_callback_query_handler(add_comment,comment_data.filter(action=['add_comment']))
    dp.register_callback_query_handler(new_order, location_data.filter(func=['location']))
    dp.register_message_handler(location, commands = ['order'])
    dp.register_message_handler(get_location, content_types=types.ContentType.LOCATION)
    dp.register_callback_query_handler(chanel_order, comment_data.filter(action=['chanel_order']))
    # dp.register_callback_query_handler(chanel_order, comment_data.filter(action=['chanel_order']), state=From.comment)