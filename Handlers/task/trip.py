from aiogram import types, Dispatcher
from aiogram.utils.callback_data import CallbackData
from creat_bot import dp, bot, db, TOKEN, os
from Handlers.task.order import order_id_data, From
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import json





async def take_order(call: types.CallbackQuery, callback_data: dict):
    user_id = callback_data.get('user_id')
    order_id_call = callback_data.get("id_db")

    if bool(call.from_user.username):
        if call.from_user.username == db.subscriber_exists(call.from_user.id)[0][2]:
            pass
        else:
            db.update_UserName(call.from_user.id, call.from_user.username)
    else:
        pass




    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    if db.order_finish__exists(call.from_user.username) != None:
        await call.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–∫–∞–∑", show_alert=True)
        return
        



    markup = types.InlineKeyboardMarkup()
    button = [
        types.InlineKeyboardButton(text='–ü—Ä–∏–µ—Ö–∞–ª‚úÖ', callback_data=order_id_data.new(id_db=order_id_call, func="arrived",user_id=user_id)),
        ]
    markup.add(*button)
    db.get_order(order_id=order_id_call, username = str(db.subscriber_exists(call.from_user.id)[0][2]))
    
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= call.message.text + "\n–ó–∞–∫–∞–∑ –≤–∑—è–ª - " + str(db.subscriber_exists(call.from_user.id)[0][3]) + " (" + str(db.subscriber_exists(call.from_user.id)[0][2]) + ")", reply_markup=markup)
    await bot.delete_message(chat_id=user_id, message_id=json.loads(str(db.get_message_client(user_id)))['message_id'])

    PATH = os.getcwd()
    src = PATH + "\\DB\\car\\" + str(db.subscriber_exists(call.from_user.id)[0][10]) + ".png"
    with open(src, 'rb') as photo:
        await bot.send_photo(chat_id=user_id, caption=json.loads(str(db.get_message_client(user_id)))['text'] + "\n–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è–ª–∏, –ø—Ä–∏–¥–µ—Ç - " + str(db.subscriber_exists(call.from_user.id)[0][10]), photo=photo)
                           
async def arrived(call: types.CallbackQuery, callback_data: dict):
    user_id = callback_data.get('user_id')
    order_id_call = callback_data.get("id_db")
    
    #–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–æ–≥–æ –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è –∑–∞–∫–∞–∑
    if db.order_who_get_order__exists(order_id_call) == call.from_user.username:
        pass
    else:
        await call.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!!!", show_alert=True)
        return

    db.add_arrived_order(order_id_call)

    #–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    markup_finish = types.InlineKeyboardMarkup()
    button = [
        types.InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑üèÅ', callback_data=order_id_data.new(id_db=order_id_call, func="finish_order",user_id=user_id)),
        ]
    markup_finish.add(*button)
    order_mes = await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= call.message.text + "\n–í—ã –ø—Ä–∏–µ—Ö–∞–ª–∏!", reply_markup=markup_finish)
    db.add_message_chat(message_chat=str(order_mes), order_id=order_id_call)

    #–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    markup_leave = types.InlineKeyboardMarkup()
    button = [
        types.InlineKeyboardButton(text='–í—ã—Ö–æ–∂—É‚úÖ', callback_data=order_id_data.new(id_db=order_id_call, func="leave",user_id=user_id)),
        ]
    markup_leave.add(*button)
    mes_client = await bot.send_message(chat_id=user_id, text="–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª, –æ–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç", reply_markup=markup_leave)
    db.add_message_client(str(mes_client), order_id_call)

async def leave(call: types.CallbackQuery, callback_data: dict):
    user_id = callback_data.get('user_id')
    order_id_call = callback_data.get("id_db")

    #–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await bot.edit_message_text(chat_id=TOKEN.chatId, message_id=json.loads(str(db.get_message_chat(user_id)))['message_id'], text= json.loads(str(db.get_message_chat(user_id)))['text'] + "\n–ó–∞–∫–∞–∑—á–∏–∫–∏ —É–∂–µ –≤—ã—Ö–æ–¥—è—Ç!", reply_markup=json.loads(str(db.get_message_chat(user_id)))['reply_markup'])
    #–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id, text="\n–û—Ç–ª–∏—á–Ω–æ, –º—ã —Å–æ–æ–±—â–∏–ª–∏ –æ–± —ç—Ç–æ–º –≤–æ–¥–∏—Ç–µ–ª—é")

async def finish_order(call: types.CallbackQuery, callback_data: dict):
    user_id = callback_data.get('user_id')
    order_id_call = callback_data.get("id_db")

    #–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–æ–≥–æ –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è –∑–∞–∫–∞–∑
    if db.order_who_get_order__exists(order_id_call) == call.from_user.username:
        pass
    else:
        await call.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑!!!", show_alert=True)
        return
    

    
    

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await bot.edit_message_text(chat_id=TOKEN.chatId, message_id=call.message.message_id , text= call.message.text + "\n–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑!")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await bot.delete_message(chat_id=user_id, message_id=json.loads(str(db.get_message_client(user_id)))['message_id'])
    await bot.send_message(chat_id=user_id, text="""‚úÖ–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\nüôå–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!""")


    # –û—Ç–º–µ—Ç–∫–∞ –≤ –±–¥ –º–∏–Ω—É—Å –∑–∞–∫–∞–∑
    db.add_finish_order(order_id_call)
    db.add_finish_order_diver(call.from_user.id)
    db.add_finish_order_client(user_id)
    if db.get_orders_left(call.from_user.id)[0] == 0:
        await call.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–∫–∞–∑—ã, –≤—ã –±—É–¥–µ—Ç–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —á–∞—Ç–∞. –ß—Ç–æ–±—ã –≤–Ω–æ–≤—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å", show_alert=True)
        await bot.kick_chat_member(chat_id=call.message.chat.id, user_id=call.from_user.id)




def register_handler(dp: Dispatcher):
    dp.register_callback_query_handler(take_order, order_id_data.filter(func=['take_order']))
    dp.register_callback_query_handler(arrived, order_id_data.filter(func=['arrived']))
    dp.register_callback_query_handler(leave, order_id_data.filter(func=['leave']))
    dp.register_callback_query_handler(finish_order, order_id_data.filter(func=['finish_order']))
    # dp.register_message_handler(location, commands = ['trip'])
    # dp.register_message_handler(get_location, content_types=types.ContentType.LOCATION)